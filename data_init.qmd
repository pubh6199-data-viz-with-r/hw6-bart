---
title: "dataset initialization (de-duplicate & anonymize)"
author:
  - name: Sora Ely, MD
    affiliation: George Washington University
date: "2025-06-15"
editor: source
format: 
  html:
    toc: true
    toc-location: right
    self-contained: true
theme: flatly
mainfont: "Arial"
fontsize: 11pt
execute:
  echo: true
  warning: false
  message: false
---
  
```{r}
#| label: setup
#| include: false

knitr::opts_chunk$set(
  warning = FALSE,
  message = FALSE,
  fig.path = "figs/",
  fig.width = 7.252,
  fig.height = 4,
  comment = "#>",
  fig.retina = 3
)
```

## import data

```{r}
#| label: import-data

# read in C:\Users\sorae\Documents\RStudio\PUBH6199\lab4-bart\data\MFA Tobacco HX 2025-5-1 - 2025-5-31 pt anon.xlsx
library(readxl)
library(dplyr)
mfa_tobacco_hx <- read_excel("data/MFA Tobacco HX 2025-5-1 - 2025-5-31 pt anon.xlsx")

glimpse(mfa_tobacco_hx)
```

## clean up the column names
```{r}
#| label: clean-names

library(janitor)
mfa_tobacco_hx |> janitor::clean_names() -> mfa_tobacco_hx

glimpse(mfa_tobacco_hx)

# rename long column names to shorter names
mfa_tobacco_hx <- mfa_tobacco_hx %>%
  rename(
    date = encounter_contact_date,
    roomed_by_prov_type = roomed_by_provider_type,
    hx_complete = tobacco_history_complete,
    lcs_eligible = patient_lung_cancer_screen_eligibility
  )
```

## remove NULL

```{r}
#| label: remove-null

# check for N/A
mfa_tobacco_hx %>%
  select(roomed_by) %>%
  filter(is.na(roomed_by)) 
# 0 rows with roomed_by == NA

# check for NULL
mfa_tobacco_hx %>%
  select(roomed_by) %>%
  filter(roomed_by == "NULL") %>% 
  count()
# 308 rows with roomed_by == "NULL"

# remove rows with roomed_by == "NULL"
mfa_tobacco_hx <- mfa_tobacco_hx %>%
  filter(roomed_by != "NULL")
# check that NULL rows are removed
mfa_tobacco_hx %>%
  select(roomed_by) %>%
  filter(roomed_by == "NULL") %>% 
  count()
# 0 rows with roomed_by == "NULL"
```

```{r}
#| label: convert-names to initials
#| echo: false
#| eval: false
#| include: false

# identify distinct names
mfa_tobacco_hx %>%
  select(roomed_by) %>%
  distinct() %>%
  arrange(roomed_by)
# 211 unique names

## initially trying to convert names to initials
# split the roomed_by names from "LAST, FIRST" to 2 separate variables roomed_by_F = "FIRST" and roomed_by_L = "LAST"
library(tidyr)
mfa_tobacco_hx <- mfa_tobacco_hx %>%
  separate(roomed_by, into = c("roomed_by_LAST", "roomed_by_FIRST"), sep = ",\\s*", remove = FALSE)
glimpse(mfa_tobacco_hx)

# convert roomed_by_LAST and roomed_by_FIRST to initials, roomed_by_L and roomed_by_F
mfa_tobacco_hx <- mfa_tobacco_hx %>%
  mutate(roomed_by_L = substr(roomed_by_LAST, 1, 1),
         roomed_by_F = substr(roomed_by_FIRST, 1, 1))
glimpse(mfa_tobacco_hx)

# combine initials into roomed_by_initials as "FL" (e.g. "Sora Ely" becomes "SE")
mfa_tobacco_hx <- mfa_tobacco_hx %>%
  mutate(roomed_by_initials = paste0(roomed_by_F, roomed_by_L))
glimpse(mfa_tobacco_hx)

# check distinct initials
mfa_tobacco_hx %>%
  select(roomed_by_initials) %>%
  distinct() %>%
  arrange(roomed_by_initials)
# 148 unique initials

## this is too complicated and it's not really essential to use initials, so just assigned a numeric ID to each roomed_by unique name
```

## convert Roomed By names to numeric ID

```{r}
#| label: convert-names to numeric ID

# identify distinct names
mfa_tobacco_hx %>%
  select(roomed_by) %>%
  distinct() %>%
  arrange(roomed_by)
# 211 unique names

# assign a numeric ID to each roomed_by unique name
mfa_tobacco_hx <- mfa_tobacco_hx %>%
  mutate(roomed_by_ID = as.numeric(factor(roomed_by, levels = unique(roomed_by))))
glimpse(mfa_tobacco_hx)
# check distinct roomed_by_ID
mfa_tobacco_hx %>%
  select(roomed_by_ID) %>%
  distinct() %>%
  arrange(roomed_by_ID)
# 211 unique roomed_by_IDs
```

## remove duplicates

```{r}
#| label: remove-duplicates

# check for duplicates (>1 row with same visit_id)
mfa_tobacco_hx %>%
  group_by(visit_id) %>%
  filter(n() > 1) %>%
  distinct(visit_id)
# 180 visit_ids have duplicates

# count non-duplicate visit_ids
mfa_tobacco_hx %>%
  group_by(visit_id) %>%
  filter(n() == 1) %>%
  ungroup() %>%
  count()
# 2901 non-duplicate visit_ids

# count total number of rows with duplicate visit_ids (not total duplicate visit_ids, but total rows with those visit_ids)
mfa_tobacco_hx %>%
  group_by(visit_id) %>%
  filter(n() > 1) %>%
  ungroup() %>%
  count()
# 402 rows with duplicate visit_ids

glimpse(mfa_tobacco_hx)
# 3303 rows
3303-2901
# 402 matches 402 rows with duplicate visit_ids

# show all rows with duplicates (for me to check consistency, incl with LCS eligibility)
mfa_tobacco_hx %>%
  group_by(visit_id) %>%
  filter(n() > 1) %>%
  select(visit_id, roomed_by, hx_complete, lcs_eligible) %>%
  arrange(visit_id)

## keep all rows with unique visit_ids
mfa_tobacco_data <- mfa_tobacco_hx %>%
  group_by(visit_id) %>%
  filter(n() == 1) %>%
  ungroup()
glimpse(mfa_tobacco_data)

## for any duplicate visit_ids, keep the first instance where tobacco_history_complete == "Complete";
## if none of the rows have tobacco_history_complete == "Complete", then keep the first instance
## (this became more complicated, where I had to de-duplicate the records with hx_complete values all the same v not all the same separately)
## (it feels like there should be a more efficient way to do this, but I couldn't figure it out)

# create mfa_tobacco_dupl to hold the duplicates
mfa_tobacco_dupl <- mfa_tobacco_hx %>%
  group_by(visit_id) %>%
  filter(n() > 1) %>%
  ungroup()
glimpse(mfa_tobacco_dupl)
# 402 rows with duplicate visit_ids
mfa_tobacco_dupl %>%
  distinct(visit_id)
# representing 180 unique visit_ids

# check if for a given visit_id with more than 1 row, all rows have the same value for lcs_eligible
mfa_tobacco_dupl %>%
  group_by(visit_id) %>%
  summarise(lcs_eligible_unique = n_distinct(lcs_eligible)) %>%
  filter(lcs_eligible_unique > 1)
# checking to make sure this worked properly
mfa_tobacco_dupl %>%
  group_by(visit_id) %>%
  summarise(lcs_eligible_unique = n_distinct(lcs_eligible))
# all 1s by reviewing table manually
# so YES all rows with the same visit_id have the same value for lcs_eligible

# check if for a given visit_id with more than 1 row, all rows have the same value for hx_complete
mfa_tobacco_dupl %>%
  group_by(visit_id) %>%
  summarise(hx_complete_unique = n_distinct(hx_complete)) %>%
  filter(hx_complete_unique > 1)
# checking to make sure this worked properly
mfa_tobacco_dupl %>%
  group_by(visit_id) %>%
  summarise(hx_complete_unique = n_distinct(hx_complete)) %>% 
  arrange(desc(hx_complete_unique))
# so NO: 32 visit_ids have more than 1 hx_complete value (i.e. at least 1 "Complete" and at least 1 "Not Complete")

# extract the 32 visit_ids with more than 1 hx_complete value
mfa_tobacco_dupl_hx <- mfa_tobacco_dupl %>%
  group_by(visit_id) %>%
  summarise(hx_complete_unique = n_distinct(hx_complete)) %>% 
  filter(hx_complete_unique > 1) %>%
  ungroup() %>%
  arrange(visit_id)
glimpse(mfa_tobacco_dupl_hx)

# select all rows in mfa_tobacco_dupl with visit_ids from mfa_tobacco_dupl_hx
mfa_tobacco_dupl %>%
  filter(visit_id %in% mfa_tobacco_dupl_hx$visit_id) %>% 
  select(visit_id, hx_complete)

# of these 32 visit_ids, how many have hx_complete == "Complete"?
mfa_tobacco_dupl %>%
  filter(visit_id %in% mfa_tobacco_dupl_hx$visit_id) %>% 
  select(visit_id, hx_complete) %>%
  filter(hx_complete == "Complete") %>%
  distinct(visit_id) %>%
  arrange(visit_id)
# this seems to say all 32
mfa_tobacco_dupl %>%
  filter(visit_id %in% mfa_tobacco_dupl_hx$visit_id) %>% 
  select(visit_id, hx_complete) %>%
  arrange(visit_id)
# it does look on manual check like all 32 have a Complete hx_complete value

# create a new variable hx_complete_unique to count the number of unique hx_complete values for each visit_id to parallel the function of the mfa_tobacco_dupl_hx$visit_id list (but will work to select for both cases, i.e. where all hx_complete values are the same and where they are not)
mfa_tobacco_dupl <- mfa_tobacco_dupl %>%
  group_by(visit_id) %>%
  mutate(hx_complete_unique = n_distinct(hx_complete))
glimpse(mfa_tobacco_dupl)
mfa_tobacco_dupl %>%
  filter(hx_complete_unique > 1) %>%
  count()
# correctly yields 32
mfa_tobacco_dupl %>%
  filter(hx_complete_unique == 1) %>%
  count()
# yields 148
148+32
# correctly totals to 180 visit_ids with duplicates
# now I can filter based on hx_complete_unique == 1 v > 1 instead of the mfa_tobacco_dupl_hx$visit_id

## so now I can remove duplicates from mfa_tobacco_dupl for visit_ids where NOT all hx_complete values are the same (and all should have at least one hx_complete == "Complete" value) by keeping the first instance where hx_complete == "Complete" and adding those rows to mfa_tobacco_data
glimpse(mfa_tobacco_data)
mfa_tobacco_data <- mfa_tobacco_data %>%
  bind_rows(
    mfa_tobacco_dupl %>%
      filter(hx_complete_unique > 1) %>%
      group_by(visit_id) %>%
      filter(hx_complete == "Complete") %>% 
      slice(1) %>% # this should keep the first instance where hx_complete == "Complete"
      ungroup()
  )
glimpse(mfa_tobacco_data)
2933-2901
# 32 rows were correctly added to mfa_tobacco_data

## now need to remove duplicates from mfa_tobacco_dupl for visit_ids where all hx_complete values are the same by keeping the first instance and adding those rows to mfa_tobacco_data
mfa_tobacco_data <- mfa_tobacco_data %>%
  bind_rows(
    mfa_tobacco_dupl %>%
      filter(hx_complete_unique == 1) %>%
      group_by(visit_id) %>%
      slice(1) %>% # this should keep the first instance 
      ungroup()
  )
glimpse(mfa_tobacco_data)
3081-2933
# 148 rows were correctly added to mfa_tobacco_data
3081-2901
# 180 total rows were added to mfa_tobacco_data, which is the same as the number of visit_ids with duplicates in mfa_tobacco_dupl
mfa_tobacco_data |> 
  distinct(visit_id)
# 3081 unique visit_ids in mfa_tobacco_data matches 3081 rows in mfa_tobacco_data
```

```{r}
#| label: remove-duplicates - test work
#| echo: FALSE
#| eval: FALSE
#| include: FALSE

############
## attempted pivot-wider and couldn't really get it to work

# pivot mfa_tobacco_dupl to wide format for hx_complete, adding a number to each hx_complete column
mfa_tobacco_dupl_wide <- mfa_tobacco_dupl %>%
  pivot_wider(names_from = hx_complete, values_from = hx_complete, names_prefix = "hx_complete_")
glimpse(mfa_tobacco_dupl_wide)
glimpse(mfa_tobacco_dupl)

# re-cleaning column names
mfa_tobacco_dupl_wide |> janitor::clean_names() -> mfa_tobacco_dupl_wide
glimpse(mfa_tobacco_dupl_wide)

mfa_tobacco_dupl_wide %>%
  group_by(visit_id) %>%
  select(visit_id, hx_complete_complete, hx_complete_not_complete) %>%
  arrange(visit_id)
# check if hx_complete_complete and hx_complete_not_complete are mutually exclusive
mfa_tobacco_dupl_wide %>%
  group_by(visit_id) %>%
  summarise(hx_complete_complete = sum(!is.na(hx_complete_complete)),
            hx_complete_not_complete = sum(!is.na(hx_complete_not_complete))) %>%
  filter(hx_complete_complete > 0 & hx_complete_not_complete > 0)
# GOOD: NO they are not; the same 32 visit_ids that had more than 1 hx_complete value have both

# remove duplicate visit_ids from mfa_tobacco_dupl_wide
############

############
## so now I can remove duplicates from mfa_tobacco_dupl for visit_ids where NOT all hx_complete values are the same (and all should have at least one hx_complete == "Complete" value) by keeping the first instance where hx_complete == "Complete" and adding those rows to mfa_tobacco_data
glimpse(mfa_tobacco_data)
mfa_tobacco_data <- mfa_tobacco_data %>%
  bind_rows(
    mfa_tobacco_dupl %>%
      filter(visit_id %in% mfa_tobacco_dupl_hx$visit_id) %>%
      group_by(visit_id) %>%
      filter(hx_complete == "Complete" | row_number() == 1) %>%
      ungroup()
  )
glimpse(mfa_tobacco_data)
2945-2901
# so 44 rows were added to mfa_tobacco_data (instead of 32)

# figure out why duplicates still added
mfa_tobacco_dupl %>%
  filter(visit_id %in% mfa_tobacco_dupl_hx$visit_id) %>%
  group_by(visit_id) %>%
  filter(hx_complete == "Complete" | row_number() == 1) %>%
  ungroup() %>% 
  select(visit_id, hx_complete)
# still some duplicates seen, & also some rows with hx_complete == "Not Complete"
# try slice instead of row_number()
mfa_tobacco_dupl %>%
  filter(visit_id %in% mfa_tobacco_dupl_hx$visit_id) %>%
  group_by(visit_id) %>%
  slice(which(hx_complete == "Complete")) %>% # this should keep the first instance where hx_complete == "Complete"
  ungroup() %>% 
  select(visit_id, hx_complete)
# yields 38 rows still, seems to be selecting ALL complete rows so this only eliminated the hx_complete == "Not Complete" rows, not the other duplicates
mfa_tobacco_dupl %>%
  filter(visit_id %in% mfa_tobacco_dupl_hx$visit_id) %>%
  group_by(visit_id) %>%
  filter(hx_complete == "Complete") %>% 
  slice(1) %>% # this should keep the first instance where hx_complete == "Complete"
  ungroup() %>%
  select(visit_id, hx_complete)
# finally yields 32 rows, so this is the correct way to do it
# changing to my new hx_complete_unique variable to filter for visit_ids where all hx_complete values are the same instead of mfa_tobacco_dupl_hx$visit_id
mfa_tobacco_dupl %>%
  filter(hx_complete_unique > 1) %>%
  group_by(visit_id) %>%
  filter(hx_complete == "Complete") %>% 
  slice(1) %>% # this should keep the first instance where hx_complete == "Complete"
  ungroup() %>%
  select(visit_id, hx_complete)
# still works

# actually adding 32 rows to mfa_tobacco_data
mfa_tobacco_data <- mfa_tobacco_data %>%
  bind_rows(
    mfa_tobacco_dupl %>%
      filter(hx_complete_unique > 1) %>%
      group_by(visit_id) %>%
      filter(hx_complete == "Complete") %>% 
      slice(1) %>% # this should keep the first instance where hx_complete == "Complete"
      ungroup()
  )
############
## now need to remove duplicates from mfa_tobacco_dupl for visit_ids where all hx_complete values are the same by keeping the first instance and adding those rows to mfa_tobacco_data
# check how many rows should be added (i.e. how many visit_ids in mfa_tobacco_dupl has only 1 hx_complete value)
mfa_tobacco_dupl %>%
  group_by(visit_id) %>%
  summarise(hx_complete_unique = n_distinct(hx_complete)) %>%
  filter(hx_complete_unique == 1) %>% 
  arrange(visit_id)
# 148 visit_ids with only 1 hx_complete value

mfa_tobacco_dupl %>%
  filter(hx_complete_unique == 1) %>%
  group_by(visit_id) %>%
  slice(1) %>% # this should keep the first instance 
  ungroup()
# correctly yields 148 rows, so this is the correct way to do it

# actually adding 148 rows to mfa_tobacco_data
mfa_tobacco_data <- mfa_tobacco_data %>%
  bind_rows(
    mfa_tobacco_dupl %>%
      filter(hx_complete_unique == 1) %>%
      group_by(visit_id) %>%
      slice(1) %>% # this should keep the first instance 
      ungroup()
  )
############
```

## remove unnecessary columns

```{r}
#| label: remove-unnecessary-columns

glimpse(mfa_tobacco_data)
tobacco_data <- mfa_tobacco_data %>%
  select(
    location,
    department,
    date,
    roomed_by_ID,
    roomed_by_prov_type,
    tobacco_user,
    hx_complete,
    lcs_eligible
  )
glimpse(tobacco_data)
```

## output the cleaned data to csv

```{r}
#| label: output-data

write.csv(tobacco_data, "tobacco_data_clean.csv", row.names = FALSE)
```

